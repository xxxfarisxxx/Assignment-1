#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <string.h>

int main(void)
{
        char s[50];
        int pipefds[2];
        int child;
        char buffer[50];
        void sigint_handler(int sig);
        void sigtstp_handler(int sig);
        void sigquit_handler(int sig);

        // Signal
        if (signal(SIGINT, sigint_handler) == SIG_ERR){
                perror("signal SIGINT");
                exit(1);
        }
        else if (signal(SIGTSTP, sigtstp_handler) == SIG_ERR){
                perror("signal SIGTSTP");
                exit(1);
        }
        else if (signal(SIGQUIT, sigquit_handler) == SIG_ERR){
                perror("signal SIGQUIT");
                exit(1);
        }


        // Pipe
        if(pipe(pipefds) == -1){
                perror("Pipe Error!!!");
                exit(EXIT_FAILURE);
        }


        // Parent Process
        printf("Enter a amount :");


        if (fgets(s, sizeof(s), stdin) == NULL){
                perror("ERROR!");
        }
        else {
                s[strcspn(s, "\n")] = '\0';
                printf("You entered: %s\n\n", s);
        }
 // Looping Method
        printf("Enter how many bank account do you want to funds transfer? : ");
        scanf("%d", &child);

        if (child  < 1){
                perror("ERROR!");
        }
        else {
                printf("You entered: %d\n\n", child);
        }



        printf("Sending data to system...\n");
        write(pipefds[1], &s, sizeof(s));
        printf("Done.\n\n");


        printf("System receiving data from user...\n");
        read(pipefds[0], &buffer, sizeof(buffer));
        printf("Done.\n\n");


        // Fork Looping
        for(int i = 0; i <("%d", child) ; i++) {
                pid_t pid = fork();


                if(pid == 0) {
                        printf("This bank account receive '%s' from user\n", buffer);
                        exit(0);
                }
                else {
                        printf("Waiting for system processes to finish...\n");
                        wait(NULL);
                        close(pipefds[1]);
                        close(pipefds[0]);
                        printf("Your transaction finished.\n\n");
                }
        }
}

void sigint_handler(int sig)
{
        printf("Ctrl + C Captured \n");
}


void sigtstp_handler(int sig)
{
        printf("Ctrl + Z Captured \n");
}

void sigquit_handler(int sig)
{
        printf("Ctrl + Backspace Captured \n");
}
